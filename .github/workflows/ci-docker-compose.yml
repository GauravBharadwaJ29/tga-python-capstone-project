name: CI - Build, Deploy, and Test Docker Compose

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests? Set false to skip tests'
        required: false
        default: 'false'  # tests disabled by default
concurrency:
  group: ci-build-deploy-test
  cancel-in-progress: true
  
jobs:
  build-deploy-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongo:
        image: mongo:6
        env:
          MONGO_INITDB_DATABASE: admin
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 27017:27017

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      kafka:
        image: confluentinc/cp-kafka:7.6.0
        ports:
          - 9092:9092
        options: >-
          -e KAFKA_CLUSTER_ID=VJ7gkKpd-kqlYxyp4xx8zw
          -e KAFKA_NODE_ID=1
          -e KAFKA_PROCESS_ROLES=broker,controller
          -e KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
          -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
          -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
          -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
          -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
          -e KAFKA_LOG_DIRS=/var/lib/kafka/data
        volumes:
          - kafka_data:/var/lib/kafka/data



    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Diagnostic - Check port 27017 usage and running containers
      run: |
        echo "Listening TCP ports:"
        sudo netstat -tulpn | grep LISTEN || true

        echo "Check ports 5432, 27017, 6379, 9092 specifically:"
        for port in 5432 27017 6379 9092; do
          echo "Port $port usage:"
          sudo lsof -i :$port || echo "Port $port not in use"
        done

        echo "List all running Docker containers:"
        docker ps

    - name: Cleanup Docker environment
      run: |
        echo "Prune unused containers, networks, volumes, images"
        docker container prune -f
        docker network prune -f
        docker volume prune -f
        docker image prune -f
    - name: Build Docker images
      working-directory: ./
      run: docker compose build

    # - name: Push Docker images
    #   run: docker compose push
    - name: Prepare log directories for volume mounts
      run: |
        mkdir -p ./logs/auth_service/logs
        mkdir -p ./logs/product_catalog/logs
        mkdir -p ./logs/inventory/logs
        mkdir -p ./logs/order/logs
        mkdir -p ./logs/payment/logs
        mkdir -p ./logs/billing/logs
        mkdir -p ./logs/delivery/logs
        mkdir -p ./logs/notification/logs
        mkdir -p ./logs/notification_bridge/logs
        mkdir -p ./logs/store_onboarding/logs
        mkdir -p ./logs/api_gateway/logs
        
    - name: Start Docker Compose services
      working-directory: ./    
      run: docker compose up -d

    - name: Make wait-for-services.sh executable
      run: chmod +x ./scripts/wait-for-services.sh

    - name: Wait for services to be healthy
      run: ./scripts/wait-for-services.sh

    - name: Run tests (conditional)
      if: ${{ github.event.inputs.run_tests == 'true' }}
      run: docker compose exec auth_service pytest ./test || echo "Tests failed but continuing."

    - name: Tear down Docker Compose services
      working-directory: ./       
      if: always()
      run: docker compose down

    - name: Cleanup workspace - logs and temp files
      if: always()
      run: |
        docker container prune -f
        docker network prune -f
        docker volume prune -f
        docker image prune -f      
        echo "Cleaning up logs and temporary files..."
        rm -rf ./logs
        rm -rf ./temp || true      
