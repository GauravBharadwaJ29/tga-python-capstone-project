name: CI - Build, Deploy, and Test Docker Compose

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests? Set false to skip tests'
        required: false
        default: 'false'  # tests disabled by default

jobs:
  build-deploy-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

        mongo:
          image: mongo:6
          env:
            MONGO_INITDB_DATABASE: admin
          options: >-
            --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")' --quiet"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 10
          ports:
            - 27017:27017

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      zookeeper:
        image: confluentinc/cp-zookeeper:7.6.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        options: >-
          --health-cmd "echo 'ruok' | nc localhost 2181"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 2181:2181       

      kafka:
        image: confluentinc/cp-kafka:7.6.0
        env:
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd "nc -z localhost 9092 || exit 1"
          --health-interval 20s
          --health-timeout 15s
          --health-retries 10
        ports:
          - 9092:9092

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker images
      working-directory: ./
      run: docker compose build

    # - name: Push Docker images
    #   run: docker compose push
    - name: Prepare log directories for volume mounts
      run: |
        mkdir -p ./logs/auth_service/logs
        mkdir -p ./logs/product_catalog/logs
        mkdir -p ./logs/inventory/logs
        mkdir -p ./logs/order/logs
        mkdir -p ./logs/payment/logs
        mkdir -p ./logs/billing/logs
        mkdir -p ./logs/delivery/logs
        mkdir -p ./logs/notification/logs
        mkdir -p ./logs/notification_bridge/logs
        mkdir -p ./logs/store_onboarding/logs
        mkdir -p ./logs/api_gateway/logs
        
    - name: Start Docker Compose services
      working-directory: ./    
      run: docker compose up -d

    - name: Make wait-for-services.sh executable
      run: chmod +x ./scripts/wait-for-services.sh

    - name: Wait for services to be healthy
      run: ./scripts/wait-for-services.sh

    - name: Run tests (conditional)
      if: ${{ github.event.inputs.run_tests == 'true' }}
      run: docker compose exec auth_service pytest ./test || echo "Tests failed but continuing."

    - name: Tear down Docker Compose services
      working-directory: ./       
      if: always()
      run: docker compose down

    - name: Cleanup workspace - logs and temp files
      if: always()
      run: |
        docker container prune -f
        docker network prune -f
        docker volume prune -f
        docker image prune -f      
        echo "Cleaning up logs and temporary files..."
        rm -rf ./logs
        rm -rf ./temp || true      
