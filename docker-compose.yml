services:
  # Databases
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d

  mongo:
    image: mongo:6
    command: ["mongod", "--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  # Kafka (KRaft mode, no ZooKeeper)
  # --- Removed lines ---
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.0
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  # --- End removed lines ---

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    restart: unless-stopped
    # --- Removed line ---
    # depends_on:
    #   - zookeeper
    # --- End removed line ---
    ports:
      - "9092:9092"
    environment:
      # --- Removed lines ---
      # KAFKA_BROKER_ID: 1
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # --- End removed lines ---
      # --- Added lines for KRaft mode ---
      KAFKA_CLUSTER_ID: "VJ7gkKpd-kqlYxyp4xx8zw"
      CLUSTER_ID: "VJ7gkKpd-kqlYxyp4xx8zw"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"      
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      # --- End added lines ---
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Microservices
  auth_service:
    build: ./auth_service
    env_file: ./auth_service/.env
    depends_on:
      - postgres
    ports:
      - "8009:8009"
    volumes:
      - auth_service_logs:/var/log/auth_service

  product_catalog:
    build: ./product_catalog
    env_file: ./product_catalog/.env
    depends_on:
      - mongo
      - kafka
    ports:
      - "8001:8001"
    volumes:
      - product_catalog_logs:/var/log/product_catalog

  inventory:
    build: ./inventory
    env_file: ./inventory/.env
    depends_on:
      - postgres
      - kafka
    ports:
      - "8002:8002"
    volumes:
      - inventory_service_logs:/var/log/inventory_service

  order:
    build: ./order
    env_file: ./order/.env
    depends_on:
      - postgres
      - kafka
    ports:
      - "8003:8003"
    volumes:
      - order_service_logs:/var/log/order_service

  payment:
    build: ./payment
    env_file: ./payment/.env
    depends_on:
      - postgres
      - kafka
    ports:
      - "8004:8004"
    volumes:
      - payment_service_logs:/var/log/payment_service

  billing:
    build: ./billing
    env_file: ./billing/.env
    depends_on:
      - postgres
      - kafka
    ports:
      - "8005:8005"
    volumes:
      - billing_service_logs:/var/log/billing_service

  delivery:
    build: ./delivery
    env_file: ./delivery/.env
    depends_on:
      - postgres
      - kafka
    ports:
      - "8006:8006"
    volumes:
      - delivery_service_logs:/var/log/delivery_service

  notification:
    build: ./notification
    env_file: ./notification/.env
    depends_on:
      - redis
      - mongo
    ports:
      - "8007:8007"
    volumes:
      - notification_service_logs:/var/log/notification_service

  notification_bridge:
    build: ./notification_bridge
    env_file: ./notification_bridge/.env
    depends_on:
      - kafka
      - notification
    volumes:
      - notification_bridge_logs:/var/log/notification_bridge


  store_onboarding:
    build: ./store_onboarding
    env_file: ./store_onboarding/.env
    depends_on:
      - postgres
      - kafka
    ports:
      - "8008:8008"
    volumes:
      - store_onboarding_service_logs:/var/log/store_onboarding_service

  api_gateway:
    build: ./api_gateway
    env_file: ./api_gateway/.env
    depends_on:
      - product_catalog
      - inventory
      - order
      - payment
      - billing
      - delivery
      - notification
      - store_onboarding
    ports:
      - "8080:8080"
    volumes:
      - api_gateway_logs:/var/log/api_gateway

  # GUIs
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  mongo-express:
    image: mongo-express
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8083:80"
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander
    ports:
      - "8084:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis


  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest
    ports:
      - "8085:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro      
  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    user: root
    image: grafana/promtail:2.8.2
    restart: unless-stopped
    container_name: promtail    
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # Docker default container logs
      - /var/run/docker.sock:/var/run/docker.sock:ro            # Docker socket for container metadata
      - ./loki/promtail-config.yaml:/etc/promtail/config.yaml:ro  # Your Promtail config file
      
      # Mount each service logs folder explicitly      
      - ./logs/auth_service/:/var/log/auth_service/:ro
      - ./logs/product_catalog/:/var/log/product_catalog/:ro
      - ./logs/inventory/:/var/log/inventory/:ro
      - ./logs/order/:/var/log/order_service/:ro
      - ./logs/payment/:/var/log/payment_service/:ro
      - ./logs/billing/:/var/log/billing_service/:ro
      - ./logs/delivery/:/var/log/delivery_service/:ro
      - ./logs/notification/:/var/log/notification_service/:ro
      - ./logs/notification_bridge/:/var/log/notification_bridge/:ro
      - ./logs/store_onboarding/:/var/log/store_onboarding_service/:ro
      - ./logs/api_gateway/:/var/log/api_gateway/:ro
    command: -config.file=/etc/promtail/config.yaml -log.level=debug
    depends_on:
      - loki

volumes:
  postgres_data:
    name: psmarket_postgres_data
  mongo_data:
    name: psmarket_mongo_data
  kafka_data:
  order_service_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/order/logs
      o: bind
  product_catalog_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/product_catalog/logs
      o: bind
  inventory_service_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/inventory/logs
      o: bind
  payment_service_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/payment/logs
      o: bind
  billing_service_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/billing/logs
      o: bind
  delivery_service_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/delivery/logs
      o: bind
  notification_service_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/notification/logs
      o: bind
  store_onboarding_service_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/store_onboarding/logs
      o: bind
  api_gateway_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/api_gateway/logs
      o: bind
  auth_service_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/auth_service/logs
      o: bind

  notification_bridge_logs:
    driver: local
    driver_opts:
      type: none
      device: ./logs/notification_bridge/logs
      o: bind
  prometheus_data: 
  loki_data:   

  
  